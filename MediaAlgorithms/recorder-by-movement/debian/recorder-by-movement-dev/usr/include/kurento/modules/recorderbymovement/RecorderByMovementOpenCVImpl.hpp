/* Autogenerated with kurento-module-creator */

#ifndef __RECORDER_BY_MOVEMENT_OPENCV_IMPL_HPP__
#define __RECORDER_BY_MOVEMENT_OPENCV_IMPL_HPP__

#include <OpenCVProcess.hpp>
#include "RecorderByMovement.hpp"
#include <EventHandler.hpp>
#include <string>
#include <Python.h>
#include <tinyxml2.h>


namespace kurento
{
namespace module
{
namespace recorderbymovement
{

class RecorderByMovementOpenCVImpl : public virtual OpenCVProcess
{

private:
	cv::VideoWriter* color_rec;

		//Python embeding objects
		PyObject *pName;
		PyObject *pModule;
		PyObject *pFunction;
		PyObject *pArgs;
		PyObject *pValue;

		//Configuration parameters
		std::string pythonFile;
		std::string pythonFunction;
		std::string jsonFile;
		std::string parameterName;

		//Status variables
		bool configLoaded;
		int pythonState;

		//Operative variables
		std::string path;
		std::string cameraId;
        int minArea;
        int recordDelay;
        int stablePeriod;
        bool recording;
        int frameCount;
        int delayCount;

public:

  RecorderByMovementOpenCVImpl ();

  virtual ~RecorderByMovementOpenCVImpl () ;

  virtual void process (cv::Mat &mat);

		void loadConfig(const std::string &file);

	private:

		bool load(std::string file);

		bool XMLCheckResult(tinyxml2::XMLError result);

};

} /* recorderbymovement */
} /* module */
} /* kurento */

#endif /*  __RECORDER_BY_MOVEMENT_OPENCV_IMPL_HPP__ */
