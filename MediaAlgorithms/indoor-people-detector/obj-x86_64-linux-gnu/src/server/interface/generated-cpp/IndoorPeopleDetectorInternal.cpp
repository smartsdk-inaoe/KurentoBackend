/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "IndoorPeopleDetectorInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"

namespace kurento
{
namespace module
{
namespace indoorpeopledetector
{

void IndoorPeopleDetectorMethodSetDB::invoke (std::shared_ptr<IndoorPeopleDetector> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method IndoorPeopleDetector::setDB");
  }

  return obj->setDB (db);
}

void IndoorPeopleDetectorMethodSetDB::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (db);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("db") || !s.JsonValue["db"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'db' parameter should be a string");
    }

    s.SerializeNVP (db);

  }
}

void IndoorPeopleDetectorMethodSetConfiguration::invoke (std::shared_ptr<IndoorPeopleDetector> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method IndoorPeopleDetector::setConfiguration");
  }

  return obj->setConfiguration (file);
}

void IndoorPeopleDetectorMethodSetConfiguration::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (file);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("file") || !s.JsonValue["file"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'file' parameter should be a string");
    }

    s.SerializeNVP (file);

  }
}

std::shared_ptr<MediaPipeline> IndoorPeopleDetectorConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

void IndoorPeopleDetectorConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

  }
}

} /* indoorpeopledetector */
} /* module */
} /* kurento */
