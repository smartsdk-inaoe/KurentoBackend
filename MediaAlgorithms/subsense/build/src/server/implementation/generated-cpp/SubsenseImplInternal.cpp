/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "SubsenseImpl.hpp"
#include "SubsenseImplFactory.hpp"
#include "SubsenseInternal.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

using kurento::KurentoException;

namespace kurento
{
namespace module
{
namespace subsense
{

MediaObjectImpl *SubsenseImplFactory::createObjectPointer (const boost::property_tree::ptree &conf, const Json::Value &params) const
{
  kurento::JsonSerializer s (false);
  SubsenseConstructor constructor;

  s.JsonValue = params;
  constructor.Serialize (s);

  return createObject (conf, constructor.getMediaPipeline() );
}

void
SubsenseImpl::invoke (std::shared_ptr<MediaObjectImpl> obj, const std::string &methodName, const Json::Value &params, Json::Value &response)
{
  OpenCVFilterImpl::invoke (obj, methodName, params, response);
}

bool
SubsenseImpl::connect (const std::string &eventType, std::shared_ptr<EventHandler> handler)
{

  return OpenCVFilterImpl::connect (eventType, handler);
}

void
SubsenseImpl::Serialize (JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    try {
      Json::Value v (getId() );

      serializer.JsonValue = v;
    } catch (std::bad_cast &e) {
    }
  } else {
    throw KurentoException (MARSHALL_ERROR,
                            "'SubsenseImpl' cannot be deserialized as an object");
  }
}
} /* subsense */
} /* module */
} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::module::subsense::SubsenseImpl> &object, JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    if (object) {
      object->Serialize (serializer);
    }
  } else {
    std::shared_ptr<kurento::MediaObjectImpl> aux;
    aux = kurento::module::subsense::SubsenseImplFactory::getObject (JsonFixes::getString(serializer.JsonValue) );
    object = std::dynamic_pointer_cast<kurento::module::subsense::SubsenseImpl> (aux);
  }
}

void
Serialize (std::shared_ptr<kurento::module::subsense::Subsense> &object, JsonSerializer &serializer)
{
  std::shared_ptr<kurento::module::subsense::SubsenseImpl> aux = std::dynamic_pointer_cast<kurento::module::subsense::SubsenseImpl> (object);

  Serialize (aux, serializer);
  object = std::dynamic_pointer_cast <kurento::module::subsense::Subsense> (aux);
}

} /* kurento */