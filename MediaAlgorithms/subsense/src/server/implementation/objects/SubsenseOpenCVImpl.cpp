/* Autogenerated with kurento-module-creator */

#include "SubsenseOpenCVImpl.hpp"
#include <KurentoException.hpp>

using namespace cv;

namespace kurento
{
namespace module
{
namespace subsense
{

SubsenseOpenCVImpl::SubsenseOpenCVImpl ()
{
	bgs = new BackgroundSubtractorSuBSENSE;
}

SubsenseOpenCVImpl::~SubsenseOpenCVImpl ()
{
	delete bgs;
}

/*
 * This function will be called with each new frame. mat variable
 * contains the current frame. You should insert your image processing code
 * here. Any changes in mat, will be sent through the Media Pipeline.
 */
void SubsenseOpenCVImpl::process (cv::Mat &mat)
{
  	//Convert input image to gray-scaled
	Mat gray_img;
	cvtColor(mat,gray_img,CV_BGRA2GRAY);

	//Resize gray image and process it
	resize(gray_img,gray_img,Size(mat.cols/2,mat.rows/2));
	if(firstRun){
		Mat roi(gray_img.size(),CV_8UC1,Scalar_<uchar>(255));
		bgs->initialize(gray_img,roi);
		firstRun = false;
	}
	Mat foreground_img, bmodel_img;
	bgs->apply(gray_img,foreground_img);
	resize(foreground_img,foreground_img,Size(mat.cols,mat.rows));

	//Insert the binary image in the input's alpha channel
	int from_to[] = {0,3};
	mixChannels(&foreground_img,1,&mat,1,from_to,1);

}



} /* subsense */
} /* module */
} /* kurento */
